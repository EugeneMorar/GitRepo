from random import randrange as rnd, choice
import pygame as pg
import math
import time

# print (dir(math))

pg.init()
pg.font.init()

white = (255, 255, 255, 255)
black = (0, 0, 0, 255)
red = (255, 0, 0, 255)

myfont = pg.font.SysFont('Comic Sans MS', 30)
screen_width = 1200
screen_height = 900
screen = pg.display.set_mode((screen_width, screen_height))
screen.fill(white)
grav = 10
pg.display.update()

class Projectile:
    def __init__(self):
        pass


class Shell:
    def __init__(self):
        """ Конструктор класса Shell

        Args:
        x - начальное положение мяча по горизонтали
        y - начальное положение мяча по вертикали
        """
        self.x = 40
        self.y = 450
        self.r = 10
        self.vx = 0
        self.vy = 0
        self.color = choice(['blue', 'green', 'red', 'brown'])
        self.live = 30

    def move(self):
        """Переместить мяч по прошествии единицы времени.

        Метод описывает перемещение мяча за один кадр перерисовки. То есть, обновляет значения
        self.x и self.y с учетом скоростей self.vx и self.vy, силы гравитации, действующей на мяч,
        и стен по краям окна (размер окна 800х600).
        """
        self.x += self.vx
        self.y += self.vy - grav/2

    def hit_test(self, obj):
        """Функция проверяет сталкивалкивается ли данный обьект с целью, описываемой в обьекте obj.

        Args:
            obj: Обьект, с которым проверяется столкновение.
        Returns:
            Возвращает True в случае столкновения мяча и цели. В противном случае возвращает False.
        """
        if (self.x - obj.x)**2 + (self.y - obj.y)**2 <= self.r ** 2:
            return True
        else:
            return False


class Gun:
    def __init__(self, x, y):
        self.f2_power = 10
        self.f2_on = 0
        self.an = 1
        self.id = pg.Rect(x, y, 50, 420)  # FIXME: don't know how to set it...

    def fire2_start(self, event):
        self.f2_on = 1

    def fire2_end(self, event):
        """Выстрел мячом.

        Происходит при отпускании кнопки мыши.
        Начальные значения компонент скорости мяча vx и vy зависят от положения мыши.
        """
        global shells, bullet
        bullet += 1
        new_shell = Shell()
        new_shell.r += 5
        self.an = math.atan((event.pos[1] - new_shell.y) / (event.pos[0] - new_shell.x))
        new_shell.vx = self.f2_power * math.cos(self.an)
        new_shell.vy = - self.f2_power * math.sin(self.an)
        shells += [new_shell]
        self.f2_on = 0
        self.f2_power = 10

    def targetting(self, event=0):
        """Прицеливание. Зависит от положения мыши."""
        if event:
            self.an = math.atan((event.pos[0] - 450) / (event.pos[1] - 20))
        if self.f2_on:
            pg.draw.rect(screen, 'orange', self.id, 7)
        else:
            pg.draw.rect(screen, black, self.id, 7)
        self.id = pg.Rect(20, 450, 20 + max(self.f2_power, 20) * int(math.cos(self.an)), 450 + max(self.f2_power, 20) * int(math.sin(self.an)))

    def power_up(self):
        if self.f2_on:
            if self.f2_power < 100:
                self.f2_power += 1
            pg.draw.rect(screen,'orange', self.id)
        else:
            pg.draw.rect(screen, black, self.id)


class Target:
    def __init__(self):
        self.points = 0
        self.live = 1
        # FIXME: don't work!!! How to call this functions when object is created?
        self.new_target()

    def new_target(self):
        """ Инициализация новой цели. """
        self.x = rnd(600, 780)
        self.y = rnd(300, 550)
        self.r = rnd(2, 50)
        self.color = red
        pg.draw.circle(screen, self.color, (self.x, self.y), self.r)
        pg.display.update()

    def hit(self, obj, points=1):
        """
        Попадание шарика в цель.
        """

        if (self.x - obj.x)**2 + (self.y - obj.y)**2 <= (2*self.r) ** 2:
            self.points += points
            return True
        else:
            return False


t1 = Target()


bullet = 0
shells = []

class Game:
    def gun_placement(self):
        gun_placed = False
        while not gun_placed:
            for event in pg.event.get():
                if event.type == pg.MOUSEBUTTONDOWN:
                    self.gun = Gun(event.pos[0], event.pos[1])
                    gun_placed = True
    def new_game(self):
        global t1, shells, bullet
        game_is_on = True
        self.gun_placement()
        t1.new_target()
        bullet = 0
        shells = []
        game_paused = False
        pg.display.update()
        while game_is_on:
            for event in pg.event.get():
                if event.type == pg.MOUSEBUTTONDOWN and not game_paused:
                    self.gun.fire2_start(event)
                if event.type == pg.MOUSEBUTTONUP and not game_paused:
                    self.gun.fire2_end(event)
                # Add mouse movement changing the angle Trial 1
                if event.type == pg.MOUSEMOTION:
                    self.gun.targetting(event)
                if event.type == pg.QUIT:
                    pg.quit()
                t1.live = 1
                while t1.live or shells:
                    for b in shells:
                        b.move()
                        if b.hit_test(t1) or t1.live:
                            t1.live = 0
                            t1.hit(obj=b)
                            game_paused = True
                            text_surface = myfont.render(
                                'Вы уничтожили цель за ' + str(bullet) + ' выстрелов', True, black)
                            screen.blit(text_surface, (400, 300))
                            game_is_on = False
                    pg.display.update()
                    time.sleep(0.03)
                    self.gun.targetting()
                    self.gun.power_up()
        screen.fill(white)
        pg.time.Clock().tick(750)
        self.new_game()


game = Game()

game.new_game()

